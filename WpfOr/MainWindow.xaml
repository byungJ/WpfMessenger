<Window x:Class="WpfOr.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfOr"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="340">

    <Window.Resources>
        <local:TreeViewLineConverter x:Key="LineConverter"/>

        <!-- Toggle Button -->
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid Width="15" Height="13" SnapsToDevicePixels="True">
                            <!-- Rectangle 9x9 pixels -->
                            <Rectangle Width="9" Height="9" 
                    Stroke="#919191" SnapsToDevicePixels="true">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,2" StartPoint="0.5,0">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="Silver" Offset="0.5"/>
                                        <GradientStop Color="LightGray" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <!-- Vertical line inside rectangle -->
                            <Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="Black" SnapsToDevicePixels="true"/>

                            <!-- Horizontal line inside rectangle -->
                            <Rectangle Width="5" Height="1" Stroke="Black" SnapsToDevicePixels="true"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Visibility" TargetName="ExpandPath" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TreeViewItem -->
        <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
            <!--<Setter x:Name="expanded" Property="IsExpanded" Value="True" />-->
            <!--이벤트를 생성해서 위클릭(메뉴) 할 때 포커스를 이동-->
            <EventSetter Event="TreeViewItem.MouseRightButtonDown" Handler="TreeViewItem_MouseRightButtonDown"/>

            <Setter Property="Background" Value="WhiteSmoke"/>

            <!--기본 글은 Normal로 설정,,선택시 Bold-->
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <!-- Connecting Lines -->
                            <Rectangle x:Name="HorLn" Margin="9,1,0,0" Height="1" Stroke="#DCDCDC" SnapsToDevicePixels="True"/>
                            <Rectangle x:Name="VerLn" Width="1" Stroke="#DCDCDC" Margin="0,0,1,0" Grid.RowSpan="2" SnapsToDevicePixels="true" Fill="White"/>

                            <ToggleButton Margin="-1,0,0,0" x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>


                            <Border Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" MinWidth="20"/>
                            </Border>

                            <!-- item의 위치를 설정하고, Visibillity를 설정. -->
                            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- This trigger changes the connecting lines if the item is the last in the list -->
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}" Value="true">
                                <Setter TargetName="VerLn" Property="Height" Value="9"/>
                                <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top"/>
                            </DataTrigger>

                            <!--아이템은 기존에 다 보이지만, IsExpanded(The default is false)를 이용하여 false일때는 접어둡니다.-->
                            <Trigger Property="IsExpanded" Value="False">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                            </Trigger>

                            <!-- 아이템이 없으면 토글버튼 숨기기.-->
                            <Trigger Property="HasItems" Value="False">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                            </Trigger>

                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Bd" Property="Background" Value="DarkGray"/>
                                <Setter Property="Foreground" Value="White"/>
                                <Setter Property="FontWeight" Value="Bold"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <StackPanel Orientation="Horizontal" >
            <!-- 검색 TextBox, enter키 이벤트 설정.-->
            <TextBox Grid.Row="0" x:Name="tbSearchTextBox" Width="270" Height="30" HorizontalAlignment="Left" VerticalAlignment="Top" BorderBrush="LightGray" VerticalContentAlignment="Center" PreviewKeyDown="tbSearchTextBox_PreviewKeyDown">
                <TextBox.Style>
                    <Style TargetType="TextBox">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <!-- TextBox 선택시 파랑색 테두리 제거, 내용 표시-->
                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TextBox.Style>
            </TextBox>
            
            <!-- 검색버튼 -->
            <Button Height="30" Width="34" x:Name="btnSearch" Click="btnSearch_Click">
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="BorderBrush" Value="LightGray"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                         <Image x:Name="btnImg" Source="/img/ico_sch_normal.png" Width="15" Height="15"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Source" TargetName="btnImg" Value="/img/ico_sch_down.png"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="LightGray"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="DarkGray"/>
                                <Setter Property="BorderBrush" Value="DarkGray"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
               
            </Button>
        </StackPanel>
        
        <!-- VirtualizingStackPanel.IsVirtualizing="False" -->
        <TreeView Grid.Row="1" Name="trvFamilies" BorderBrush="LightGray">
            <!--공통 항목으로 ContextMenu를 뺌-->
            <TreeView.Resources>
                <ContextMenu x:Key="cmCompany">
                    <MenuItem Header="쪽지 보내기" InputGestureText="Alt+M"/>
                    <MenuItem Header="전체 대화하기" InputGestureText="Alt+S"/>
                    <MenuItem Header="메일 보내기" InputGestureText="Alt+E"/>
                    <MenuItem Header="그룹에 추가">
                        <MenuItem Header="추가!!"></MenuItem>
                    </MenuItem>
                </ContextMenu>

                <ContextMenu x:Key="cmUser">
                    <MenuItem Header="쪽지 보내기" InputGestureText="Alt+M"/>
                    <MenuItem Header="대화 하기" InputGestureText="Alt+S"/>
                    <MenuItem Header="메일 보내기" InputGestureText="Alt+E"/>
                    <Separator/>
                    <MenuItem Header="구성원 정렬">
                        <MenuItem Header="정렬!!"></MenuItem>
                    </MenuItem>
                    <MenuItem Header="그룹에 추가">
                        <MenuItem Header="추가!!"></MenuItem>
                    </MenuItem>
                    <MenuItem Header="프로필" InputGestureText="Alt+P"/>
                </ContextMenu>

                <!-- HierarchicalDataTemplate을 사용하여 트리 노드 자체를 모두 템플릿화하는 동시에 노드의 자식 항목에 대한 소스로 사용할 속성을 제어 -->
                <!--XAML 마크업에서 TreeView의 ItemTemplate에 대한 계층 데이터 Template를 지정했습니다-->
                <HierarchicalDataTemplate DataType="{x:Type local:Department}" ItemsSource="{Binding Teams}">
                    <StackPanel Orientation="Horizontal" ContextMenu="{StaticResource cmCompany}">
                        <Image Source="/img/img_tree_company.png" Width="15" Height="13" Margin="0 0 2 0"/>
                        <TextBlock Text="{Binding DepartmentName}"/>
                    </StackPanel>
                </HierarchicalDataTemplate>

                <HierarchicalDataTemplate DataType="{x:Type local:Team}" ItemsSource="{Binding Members}">
                    <StackPanel Orientation="Horizontal" ContextMenu="{StaticResource cmCompany}">
                        <Image x:Name="folderImg" Source="/img/img_tree_folder.png" Width="15" Height="13"/>
                        <TextBlock Text="{Binding TeamName}"/>
                    </StackPanel>
                <HierarchicalDataTemplate.Triggers>
                        <!--
                            IsExpanded의 기본값: false 
                            보이는 전체 아이템을 위에서 false의 경우에 ItemsHost을 접어 두었음.
                            IsExpanded가 True로 변경시 아이템이보이고, 이미지를 변경.
                        -->
                        <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True">
                            <Setter TargetName="folderImg" Property="Source" Value="/img/img_tree_folder_sele.png"/>
                        </DataTrigger>
                    </HierarchicalDataTemplate.Triggers>
                </HierarchicalDataTemplate>

                <DataTemplate DataType="{x:Type local:TeamMember}">
                    <StackPanel Orientation="Horizontal" ContextMenu="{StaticResource cmUser}">
                        <Image x:Name="userImg" Source="/img/ico_log_on.png" Width="15" Height="13"/>
                        <TextBlock Text=" ["/>
                        <TextBlock Text="{Binding Position}"/>
                        <TextBlock Text="]"/>
                        <TextBlock x:Name="name" Text="{Binding Name}"/>
                        <TextBlock Text="("/>
                        <TextBlock Text="{Binding Duty}" />
                        <TextBlock Text=")" />
                    </StackPanel>
                    
                    <!-- State의 상태에 따라 자리비움, 온라인, 오프라인 표시-->
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding State}" Value="0">
                            <Setter Property="Source" TargetName="userImg" Value="/img/ico_log_on.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="1">
                            <Setter Property="Source" TargetName="userImg" Value="/img/ico_log_busy5.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="2">
                            <Setter Property="Source" TargetName="userImg" Value="/img/ico_log_off.png"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </TreeView.Resources>
        </TreeView>
    </Grid>
</Window>
